<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://goenning.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://goenning.net/" rel="alternate" type="text/html" /><updated>2021-02-14T00:31:25-06:00</updated><id>https://goenning.net/feed.xml</id><title type="html">@goenning</title><subtitle>loop at { run; code; blog; swim; eat; cycle; } until tired;</subtitle><author><name>@goenning</name></author><entry xml:lang="en"><title type="html">How to set up a Cookieless Google Analytics website</title><link href="https://goenning.net/2021/02/01/cookieless-google-analytics/" rel="alternate" type="text/html" title="How to set up a Cookieless Google Analytics website" /><published>2021-02-01T00:00:00-06:00</published><updated>2021-02-01T00:00:00-06:00</updated><id>https://goenning.net/2021/02/01/cookieless-google-analytics</id><content type="html" xml:base="https://goenning.net/2021/02/01/cookieless-google-analytics/">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note 1&lt;/strong&gt;: Some might argue that if you are concerned about cookies you shouldn’t be using Google Analytics in the first place. That’s a valid point in which I agree, but on this post I want to leave that discussion out. The focus here is to explain how to implement Google Analytics without cookies while still keeping an acceptable unique user metrics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note 2&lt;/strong&gt;: This post is using Universal Analytics from Google and it DOES NOT WORK with Google Analytics 4. I tried many times and I could not make it work with GA4, if you know how, please share!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It might be useful for us to start with why cookies are needed in Google Analytics. Without cookies the script is not be able to identify if the user visited that site before, which would cause all page views to be counted as unique.&lt;/p&gt;

&lt;p&gt;To solve that, Google Analytics scripts creates a cookie on every user machine during the first visit. On a subsequent visit, the scripts can use that information to know if that’s a new or returning visitor.&lt;/p&gt;

&lt;p&gt;Thankfully there are solutions that do not rely on Cookies.&lt;/p&gt;

&lt;h2 id=&quot;first-step-no-more-cookies&quot;&gt;First step: No more cookies&lt;/h2&gt;

&lt;p&gt;We need to tell GA to not store anything client side. We can do so via some custom params on the &lt;code class=&quot;highlighter-rouge&quot;&gt;gtag&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;gtag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'config'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TRACKING_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;client_storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;anonymize_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! We’re done. No more cookies.&lt;/p&gt;

&lt;h2 id=&quot;second-step-unique-user-tracking&quot;&gt;Second step: Unique user tracking&lt;/h2&gt;

&lt;p&gt;The code above is enough to remove cookies, but it doesn’t solve the unique user tracking problem. As mentioned before, every visitor will be counted as a new user.&lt;/p&gt;

&lt;p&gt;The same &lt;code class=&quot;highlighter-rouge&quot;&gt;gtag&lt;/code&gt; function above supports an additional property called &lt;code class=&quot;highlighter-rouge&quot;&gt;client_id&lt;/code&gt;. Instead of letting GA generate a client id and storing on a cookie, we can generate one ourselves and send them.&lt;/p&gt;

&lt;p&gt;But after generating an ID, where do we store it? Most visitors onpublic websites are not authenticated, so it’s not possible to have a unique id per user.&lt;/p&gt;

&lt;p&gt;One option is to use an algorithm that generates an ID based on public information from the user that does not change often and could potentially identify them. The following example is a function written in Node.js that generates a user ID based on their Browser, IP Address and Language. We can also add the current week to get a distinct ID every week even if all other properties have not changed.&lt;/p&gt;

&lt;p&gt;A week is probably enough to get meaningful unique user visits like return users, but depending on your needs, it’s possible to use other values, like the Month or Day.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'crypto'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentWeekNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstDayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pastDaysOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstDayOfYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;86400000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pastDaysOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstDayOfYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;md5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'md5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remoteAddress&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;week&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentWeekNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userAgent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user-agent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acceptLanguage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'accept-language'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientIDSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userAgent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acceptLanguage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/javascript'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`user_id='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientIDSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function above generates a unique ID based on some information available to the server and write it to a global variable named &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;. It’s important to note that the function above MUST execute on a server, because JavaScript on the browser does not have access to its network IP address. Although the example above is running on Node.js, the same can be achieved in any language and framework.&lt;/p&gt;

&lt;h2 id=&quot;last-step-connecting-the-dots&quot;&gt;Last step: Connecting the dots&lt;/h2&gt;

&lt;p&gt;Something quite easy to do (which doesn’t mess up with &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy&lt;/code&gt;) is to add a script tag right before GA tag:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/user&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.googletagmanager.com/gtag/js?id=YOUR_TRACKING_ID&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code above assumes that a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /api/user&lt;/code&gt; maps to that Node.js function above. The &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt; variable can then be accessed later when calling &lt;code class=&quot;highlighter-rouge&quot;&gt;gtag&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;gtag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'config'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;YOUR_TRACKING_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;client_storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;anonymize_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;live-example&quot;&gt;Live Example&lt;/h2&gt;

&lt;p&gt;Here’s a live example &lt;a href=&quot;https://cookieless-ga.vercel.app&quot;&gt;https://cookieless-ga.vercel.app&lt;/a&gt; using the method above which is also open source &lt;a href=&quot;https://github.com/goenning/cookieless-ga&quot;&gt;https://github.com/goenning/cookieless-ga&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s it!&lt;/p&gt;</content><author><name>@goenning</name></author><category term="privacy" /><category term="googleanalytics" /><category term="cookieless" /><summary type="html">Note 1: Some might argue that if you are concerned about cookies you shouldn’t be using Google Analytics in the first place. That’s a valid point in which I agree, but on this post I want to leave that discussion out. The focus here is to explain how to implement Google Analytics without cookies while still keeping an acceptable unique user metrics.</summary></entry><entry xml:lang="en"><title type="html">Adding SEO to Single Page Applications with Rendergun</title><link href="https://goenning.net/2019/11/05/seo-on-spa-apps-with-rendergun/" rel="alternate" type="text/html" title="Adding SEO to Single Page Applications with Rendergun" /><published>2019-11-05T00:00:00-06:00</published><updated>2019-11-05T00:00:00-06:00</updated><id>https://goenning.net/2019/11/05/seo-on-spa-apps-with-rendergun</id><content type="html" xml:base="https://goenning.net/2019/11/05/seo-on-spa-apps-with-rendergun/">&lt;p&gt;SPA and SEO are two acronyms that don’t fit well together on the same sentence. Even though Google is able to crawl and index client-side rendered websites since 2015, there are a few reasons why this is not yet recommended.&lt;/p&gt;

&lt;p&gt;On this post I’ll take you though an alternative solution on how to make a SPA page SEO-ready using a technique called “Dynamic Rendering” and an open source project called Rendergun.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-problem-of-seo-on-a-single-page-application&quot;&gt;What is the problem of SEO on a Single Page Application?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://webmasters.googleblog.com/2014/05/understanding-web-pages-better.html&quot;&gt;This post from 2015&lt;/a&gt; mentions that Google is able to download, parse and execute JavaScript that generates the DOM, hence why client-side rendered applications are indexable.&lt;/p&gt;

&lt;p&gt;But this &lt;a href=&quot;https://www.youtube.com/playlist?list=PLKoqnv2vTMUPOalM1zuWDP9OQl851WMM9&quot;&gt;video series&lt;/a&gt; explains that executing JavaScript is resource intensive operation because a real browser is used. Google currently queues client-side applications rendered to be processed with a much lower priority compared to server-side rendered applications.&lt;/p&gt;

&lt;p&gt;Keep in mind that Google is indexing the whole internet and every day new pages are being discovered. When will they have enough resources to index our SPA? Every time the SPA has new or updated content, it can take weeks for Google to index it.&lt;/p&gt;

&lt;p&gt;A common solution is to use a server-side rendering feature of a JavaScript framework. But sometimes this can be complex to implement if not taken into consideration when starting the project.&lt;/p&gt;

&lt;p&gt;Dynamic Rendering is an alternative solution that can help us get better SEO results even on a Client-Side rendered application.&lt;/p&gt;

&lt;h2 id=&quot;what-is-dynamic-rendering&quot;&gt;What is Dynamic Rendering?&lt;/h2&gt;

&lt;p&gt;A normal user cannot easily differentiate between a server-side and client-side rendered application. The reason being that the user’s browser is able to easily process both kinds of response and display the UI regardless of where it’s rendered.&lt;/p&gt;

&lt;p&gt;On the other hand, web crawlers (or bots) like Google Search, Bing, Yandex and many others cannot easily process JavaScript, they’ll always prefer a server-side rendered response with big HTML body over a thin HTML and loads of JavaScript code.&lt;/p&gt;

&lt;p&gt;What if we could detect whether the request is coming from a bot and then return a server-side rendered version of the page only for crawlers? Normal users can still download and execute the JavaScript version and render it directly on their browser.&lt;/p&gt;

&lt;p&gt;This image from google is a good visual representation of what I just explained above:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2019/11/how-dynamic-rendering-works.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://developers.google.com/search/docs/guides/dynamic-rendering&quot;&gt;Google Developer Docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The traditional server-side rendering usually requires some changes on the code to ensure that every component is able to render on both server and client. But there’s another approach on server-side rendering that is language and framework agnostic. It’s called “prerender” and it fits very well into the Dynamic Rendering concept.&lt;/p&gt;

&lt;p&gt;Remember that we mentioned that Google has a low priority queue for JavaScript rendered pages due to the resource intensive operation?&lt;/p&gt;

&lt;p&gt;What if we could offload this task from them and do it ourselves? We can do exactly the same thing that they do. This is commonly known as “prerender”.&lt;/p&gt;

&lt;h2 id=&quot;prerendering&quot;&gt;Prerendering&lt;/h2&gt;

&lt;p&gt;Prerender is the technique of using a headless browser on the server to download, parse and execute the JavaScript, which then builds the DOM that is converted it into a string and returned to the client.&lt;/p&gt;

&lt;p&gt;This technique is language agnostic, the only requirement is being able to communicate with a headless browser.&lt;/p&gt;

&lt;p&gt;It’s also framework agnostic, because the headless browser will execute the JavaScript like any other browser, it doesn’t matter whether the application using React, Angular or Vue, for example.&lt;/p&gt;

&lt;p&gt;But integrating with a headless browser can be a complicate process too. For performance reasons, it’s often recommended to reuse same instance rather than a new one per render process. Browsers will often crash, so we also need to monitor its health and possible restart it if necessary. It’s also common for browsers to misbehave after being open for many hours, so we should recycle the instances every once in a while.&lt;/p&gt;

&lt;p&gt;Fortunately, there are easier ways to do it.&lt;/p&gt;

&lt;h2 id=&quot;enter-rendergun&quot;&gt;Enter Rendergun&lt;/h2&gt;

&lt;p&gt;Rendergun is an open source web server that exposes a Web API interface to perform prerendering of JavaScript rendered pages.&lt;/p&gt;

&lt;p&gt;We can start rendergun as a global NPM package or as a container.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# install rendergun install NPM&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm i &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; rendergun 

&lt;span class=&quot;c&quot;&gt;# start rendergun with default configuration&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rendergun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;OR&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; rendergun &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3000:3000 goenning/rendergun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now have rendergun running locally on port 3000.&lt;/p&gt;

&lt;p&gt;Let’s use &lt;a href=&quot;https://getfider.com&quot;&gt;Fider&lt;/a&gt; as an example of a client-side rendered website. When we open &lt;code class=&quot;highlighter-rouge&quot;&gt;https://feedback.fider.io&lt;/code&gt; on a browser, it’ll download a few javascript files and render the page on the client using React.&lt;/p&gt;

&lt;p&gt;But when we open &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/render?url=https://feedback.fider.io&lt;/code&gt; on a browser, rendergun will do the same operation using its headless chrome instance and return the rendered page as HTML. We can actually compare the response from both websites.&lt;/p&gt;

&lt;p&gt;The image below is the response from &lt;code class=&quot;highlighter-rouge&quot;&gt;https://feedback.fider.io&lt;/code&gt;, note the body with empty divs and 4 JavaScript files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2019/11/fider-client-side.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compare it with this one from &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/render?url=https://feedback.fider.io&lt;/code&gt;, note the body with the whole HTML content and no JavaScript files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2019/11/fider-server-side.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When integrating rendergun into SPA, a thin server is required so that we can intercept crawler requests and handle it differently. The pseudocode would look something like the following.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if isCrawlerRequest() 
{
    var response = httpClient.get('&amp;lt;rendergunURL&amp;gt;/render?url=' + request.url)
    return response.body;
}
var file = readFile('index.html')
return file.content;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We would basically check if the request is coming from a crawler by looking at the &lt;code class=&quot;highlighter-rouge&quot;&gt;User-Agent&lt;/code&gt; request header.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If that’s true, ask rendergun to render the current page and return the result, which is the server side rendered HTML;&lt;/li&gt;
  &lt;li&gt;If it’s not a crawler, then simply return the index.html which will then reference all the javascript files and will render on the client;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn more about rendergun, all available parameters and configuration, visit the official repository at &lt;a href=&quot;https://github.com/goenning/rendergun&quot;&gt;https://github.com/goenning/rendergun&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;when-should-i-use-prerendering-over-traditional-server-side-rendering&quot;&gt;When should I use Prerendering over traditional Server-Side Rendering&lt;/h2&gt;

&lt;p&gt;The only reason to do Prerendering over traditional Server-Side Rendering is if we want to add SEO capabilities to an already existing SPA or if there is a server-side application that is not Node.js, which makes server-side rendering much more difficult.&lt;/p&gt;

&lt;p&gt;When starting a completely new SPA project in which SEO is important, consider using Node.js and doing SSR with the chosen framework since day one.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;On this post we learned how to prerender a SPA using Rendegun and Dynamic Rendering.&lt;/p&gt;

&lt;p&gt;Prerendering is a useful alternative solution to traditional SSR and we should take into consideration the pros and cons before applying it.&lt;/p&gt;

&lt;p&gt;Rendergun gives us the peace of mind of not having to manage and monitor headless browsers instances, while giving us an easy to use HTTP interface.&lt;/p&gt;

&lt;p&gt;Till next time!&lt;/p&gt;</content><author><name>@goenning</name></author><category term="spa" /><category term="seo" /><summary type="html">SPA and SEO are two acronyms that don’t fit well together on the same sentence. Even though Google is able to crawl and index client-side rendered websites since 2015, there are a few reasons why this is not yet recommended.</summary></entry><entry xml:lang="en"><title type="html">Using Azure Container Instances to measure performance of a website from multiple locations</title><link href="https://goenning.net/2019/02/10/measuring-performance-website-multiple-locations-budget/" rel="alternate" type="text/html" title="Using Azure Container Instances to measure performance of a website from multiple locations" /><published>2019-02-10T00:00:00-06:00</published><updated>2019-02-10T00:00:00-06:00</updated><id>https://goenning.net/2019/02/10/measuring-performance-website-multiple-locations-budget</id><content type="html" xml:base="https://goenning.net/2019/02/10/measuring-performance-website-multiple-locations-budget/">&lt;h2 id=&quot;global-metrics-for-websites-with-global-visitors&quot;&gt;Global metrics for websites with global visitors&lt;/h2&gt;

&lt;p&gt;Measuring the performance of a website from multiple locations around the world is crucial with the current global scale of the internet. In most cases, your visitors are not only based in your home country but from all other countries too. From Canada to Australia, from Chile to Russia, your website is being visited by more people than you think.&lt;/p&gt;

&lt;p&gt;It’s easy to forget this fact and simply measure the performance of a website from the local machine, where it’s usually close to the website Data Center. Not only that, but this machine is probably a beast too, it can open multiple tabs of Google Chrome and load any page with an insane amount of JavaScript in half a second.&lt;/p&gt;

&lt;p&gt;But in reality, your visitors are using a 10 years old laptop with Windows 7 and are connected to the internet via a 3G network connection. Your Data Center is in San Francisco and these visitors are from The Philippines. Even your smartphone has 10x higher speed and lower latency than theirs.&lt;/p&gt;

&lt;p&gt;There are a number of paid services that allow you to constantly monitor your website performance from multiple locations around the world.&lt;/p&gt;

&lt;p&gt;But maybe you’re a geek and you want to do it yourself?&lt;/p&gt;

&lt;p&gt;On this post, I want to show you how to collect website performance from multiple locations using open source tools on a low monthly cost.&lt;/p&gt;

&lt;h2 id=&quot;webpage-timing&quot;&gt;webpage-timing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/goenning/webpage-timing&quot;&gt;goenning/webpage-timing&lt;/a&gt; is Node.js application that uses Headless Chrome to collect performance metrics from a web page.&lt;/p&gt;

&lt;p&gt;This application is also available as a Docker image, so you can run it like this:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run goenning/webpage-timing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Go on, give it a try and execute this on your Terminal.&lt;/p&gt;

&lt;p&gt;You should get a response similar to this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-02-10T16:32:25.655Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start_ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1549816345655&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;duration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;430&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iMac.local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://example.org&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;metrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;300473.456095&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Documents&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Frames&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;JSEventListeners&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Nodes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LayoutCount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RecalcStyleCount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LayoutDuration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.053402&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RecalcStyleDuration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.000584&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ScriptDuration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.000015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TaskDuration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.068091&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;JSHeapUsedSize&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2108152&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;JSHeapTotalSize&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3936256&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;entries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://example.org/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;entryType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;startTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;duration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;427.6149999932386&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;initiatorType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nextHopProtocol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;h2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;workerStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redirectStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redirectEnd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fetchStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2899999963119626&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;domainLookupStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.634999987203628&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;domainLookupEnd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.984999964013696&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.984999964013696&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;connectEnd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;313.34999995306134&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;secureConnectionStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;requestStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;313.6149999918416&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;responseStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;414.7049999446608&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;responseEnd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;415.8099999767728&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transferSize&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;encodedBodySize&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;606&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;decodedBodySize&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1270&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;serverTiming&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unloadEventStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unloadEventEnd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;domInteractive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;426.6899999929592&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;domContentLoadedEventStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;426.7049999907613&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;domContentLoadedEventEnd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;426.7049999907613&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;domComplete&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;427.6049999753013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loadEventStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;427.6149999932386&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loadEventEnd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;427.6149999932386&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;navigate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redirectCount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;first-paint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;entryType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;paint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;startTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;491.65999999968335&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;duration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;first-contentful-paint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;entryType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;paint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;startTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;491.68499995721504&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;duration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Timing&lt;/code&gt; object, it contains some information collected from the Headless Chrome that executed inside the container. In the example above, it took &lt;strong&gt;430ms&lt;/strong&gt; to load &lt;strong&gt;https://example.org&lt;/strong&gt;. If this page had any CSS/JavaScript/Image files, it’d also download it and the duration would have been higher.&lt;/p&gt;

&lt;p&gt;You can also specify some custom arguments, which allows you to collect metrics from any page.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REQUEST_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://github.com/docker goenning/webpage-timing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll also notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;entries&lt;/code&gt; array has many more items now, which includes all the CSS/JavaScript/Image files the browser had to download.&lt;/p&gt;

&lt;p&gt;Another useful parameter is &lt;code class=&quot;highlighter-rouge&quot;&gt;MONGO_URL&lt;/code&gt;, which allows you to store the &lt;code class=&quot;highlighter-rouge&quot;&gt;Timing&lt;/code&gt; object into a MongoDB collection instead of printing it to stdout. It is useful when you want to keep a history of execution over time and perform further analysis.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Replace the connection string below with your own&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MONGO_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mongodb://user:pass@your-server:port/db &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REQUEST_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://github.com/docker goenning/webpage-timing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;running-it-on-a-global-infrastructure&quot;&gt;Running it on a global infrastructure&lt;/h2&gt;

&lt;p&gt;We’ve seen so far that we can collect metrics from a web page using a local Docker container and store it in MongoDB.&lt;/p&gt;

&lt;p&gt;To go one step further we’ll use machines on the Cloud to run this container from multiple regions. You could spin up multiple Virtual Machines on the cloud provider of your preference and schedule this script on cron. But that’s not very cost effective and you’d have to carry the burden of maintaining dozens of virtual machines.&lt;/p&gt;

&lt;p&gt;But there’s a better way 😀&lt;/p&gt;

&lt;p&gt;Azure has a service called &lt;a href=&quot;https://azure.microsoft.com/en-us/services/container-instances/&quot;&gt;Azure Container Instances&lt;/a&gt;. It allows you to run a Docker container on the cloud without having to worry about the infrastructure behind it. The best of all? You only pay per execution time. If you start a container that runs for 5 seconds, you’ll pay $0.000080. On this post, I’ll show you how to perform this operation on Azure, but If prefer AWS, search for &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS Fargate&lt;/code&gt;, it’s a similar service, so you apply the same idea presented here.&lt;/p&gt;

&lt;p&gt;What we’re going to do is create dozens of Azure Container Instance on each of its 17 regions and configure it to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;goenning/webpage-timing&lt;/code&gt; with our custom parameters. We’ll also need to store the data from all locations to query it later. In this example, I’ll be using &lt;a href=&quot;https://www.mongodb.com/cloud/atlas&quot;&gt;MongoDB Atlas&lt;/a&gt; because it has a free tier and can also be hosted on Azure.&lt;/p&gt;

&lt;p&gt;Assuming that you have an Azure Account and the &lt;a href=&quot;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli&quot;&gt;Azure CLI&lt;/a&gt; is installed, run the following commands.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;az login
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;az account &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--subscription&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YOUR_SUBSCRIPTION NAME&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# you can skip this if your account has only one subscription&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a file &lt;code class=&quot;highlighter-rouge&quot;&gt;template.yaml&lt;/code&gt; with this content:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2018-06-01&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Microsoft.ContainerInstance/containerGroups&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$location$&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$name$&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$name$-01&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;goenning/webpage-timing&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environmentVariables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ORIGIN'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$location$'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;REQUEST_URL'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$request_url$'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MONGO_URL'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;secureValue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$mongo_url$'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.4&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;memoryInGb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.7&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$name$-02&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;goenning/webpage-timing&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environmentVariables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ORIGIN'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$location$'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;REQUEST_URL'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$request_url$'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MONGO_URL'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;secureValue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$mongo_url$'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.4&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;memoryInGb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.7&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$name$-03&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;goenning/webpage-timing&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environmentVariables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ORIGIN'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$location$'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;REQUEST_URL'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$request_url$'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MONGO_URL'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;secureValue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$mongo_url$'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.4&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;memoryInGb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.7&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$name$-04&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;goenning/webpage-timing&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environmentVariables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ORIGIN'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$location$'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;REQUEST_URL'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$request_url$'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MONGO_URL'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;secureValue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$mongo_url$'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.4&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;memoryInGb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.7&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$name$-05&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;goenning/webpage-timing&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environmentVariables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ORIGIN'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$location$'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;REQUEST_URL'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$request_url$'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MONGO_URL'&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;secureValue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$mongo_url$'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.4&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;memoryInGb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.7&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;osType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Linux&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;restartPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;OnFailure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This template will be loaded into Azure Container Service and it’ll create 5 containers using the same image and parameters. It’s also been configured to use up to 0.4 of the CPU and only 700MB of Memory.&lt;/p&gt;

&lt;p&gt;Create another file &lt;code class=&quot;highlighter-rouge&quot;&gt;aci.sh&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# The name of the resource group to be used on Azure&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;resource_group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webtiming-rg&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The list of locations from where the test will be executed&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;westus&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;eastus&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;westeurope&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;westus2&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;northeurope&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;southeastasia&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;eastus2&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;centralus&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;australiaeast&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;uksouth&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;southcentralus&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;centralindia&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;southindia&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;northcentralus&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;eastasia&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;canadacentral&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;japaneast&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The URL of the webpage we want to test&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;request_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/docker&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The connection string to a MongoDB instance&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mongo_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mongodb+srv://webtiming:webtiming@cluster0-s5g8l.azure.mongodb.net/webtiming?retryWrites=true&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;init&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;az group create &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$resource_group&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--location&lt;/span&gt; eastus
&lt;span class=&quot;k&quot;&gt;fi

if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;run&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; ./out
  &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; ./out
  &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;loc &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ./template.yaml | 
    &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s|\$name\$|'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loc&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-wt|'&lt;/span&gt; | 
    &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s|\$request_url\$|'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request_url&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'|'&lt;/span&gt; | 
    &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s|\$location\$|'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loc&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'|'&lt;/span&gt; | 
    &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s|\$mongo_url\$|'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mongo_url&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'|'&lt;/span&gt; | 
    &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s|\$location\$|'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loc&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'|'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./out/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-wt.yaml&quot;&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;az container show &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$loc&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-wt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--resource-group&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$resource_group&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--query&lt;/span&gt; containers[0].instanceView.currentState.state 2&amp;gt;/dev/null&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;az container start &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$resource_group&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-wt&quot;&lt;/span&gt; &amp;amp;
      &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-wt has started...&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
      &lt;/span&gt;az container create &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$resource_group&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--location&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$loc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--file&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./out/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-wt.yaml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-wait&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-wt has been created...&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
  done
fi

if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;clean&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;az group delete &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$resource_group&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--yes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first lines are the parameters, configured it based on given comments and execute:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./aci.sh init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This first step will simply create a Resource Group based on the configured name. You can skip this step if you prefer to do it manually through Azure Portal.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./aci.sh run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the most important part of the script. It’ll basically loop through each configured location and create a YAML file based on &lt;code class=&quot;highlighter-rouge&quot;&gt;template.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By the end of the execution, you should have something similar to this on your Azure Portal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2019/02/aci-webpage-timing.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that there are 17 container groups (1 per region) with 5 containers on each. Some of them have already finished processing, while others are still in progress. This process can take a few extra seconds as Azure needs to pull the images from Docker Hub Registry first.&lt;/p&gt;

&lt;p&gt;A few seconds later all groups should be on “Succeeded” state. By the end of this process, these instances will remain on Azure until you remove it. You can do so by executing &lt;code class=&quot;highlighter-rouge&quot;&gt;./aci.sh clean&lt;/code&gt;, which removes the Resource Group and all of its container instances.&lt;/p&gt;

&lt;p&gt;But if you plan to periodically execute this, you can keep the resources on Azure and simply execute &lt;code class=&quot;highlighter-rouge&quot;&gt;./aci.sh run&lt;/code&gt; again. The script is smart enough to restart the container if it already exists on Azure. You can repeat this process as many times as you want.&lt;/p&gt;

&lt;h2 id=&quot;the-results&quot;&gt;The results&lt;/h2&gt;

&lt;p&gt;We should now have a few documents on our MongoDB database, so we can now look at the data and perform some analysis. We could hook up any BI tool to this MongoDB instance, extract the data and plot some charts.&lt;/p&gt;

&lt;p&gt;But there is also &lt;a href=&quot;https://www.mongodb.com/products/charts&quot;&gt;MongoDB Charts&lt;/a&gt;, which is a data visualization tool to create visual representations of our MongoDB Data. At the time of this writing, this service is on beta and free to use, so I decided to give it a try. This is what I got from my execution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2019/02/mongodb-charts.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, we have collected 595 timings and the global average is 4165ms. The chart shows that loading &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/docker&lt;/code&gt; on Asia is 2 seconds slower when compared to US.&lt;/p&gt;

&lt;p&gt;You could go one step further and actually analyze the &lt;code class=&quot;highlighter-rouge&quot;&gt;entries&lt;/code&gt; array to find out which HTTP resources took longer to load.&lt;/p&gt;

&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to go from here?&lt;/h2&gt;

&lt;p&gt;If you liked this and want to take it to the next level, here are some ideas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Schedule this script to execute every X hours&lt;/li&gt;
  &lt;li&gt;Reduce the Docker Image size. The smaller the image is, the faster it’ll be executed on the Cloud, which means less 💸&lt;/li&gt;
  &lt;li&gt;Fork the project and enhance it with extra timing information you need&lt;/li&gt;
  &lt;li&gt;Use puppeteer to emulate a slower network and CPU&lt;/li&gt;
  &lt;li&gt;Change the script to be a multi-step process. If you have an e-commerce and you want to measure how long does it take for a user to find a product and buy it. You can use this script as a starting point and include the extra steps of this process&lt;/li&gt;
  &lt;li&gt;Go wild and deploy hundreds of containers per region 😁, just keep in mind that it’ll also increase your 💸&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;thats-all-&quot;&gt;That’s all! 🎉&lt;/h2&gt;

&lt;p&gt;What do you think about this? Please leave a comment if you any suggestion or feedback.&lt;/p&gt;</content><author><name>@goenning</name></author><category term="docker" /><category term="web" /><category term="performance" /><category term="azure" /><summary type="html">Global metrics for websites with global visitors</summary></entry><entry xml:lang="pt"><title type="html">Usando Azure Blob Storage como armazenamento de certificados com Go acme/autocert</title><link href="https://goenning.net/2018/12/21/ssl-automatico-com-azure-blob-storage/" rel="alternate" type="text/html" title="Usando Azure Blob Storage como armazenamento de certificados com Go acme/autocert" /><published>2018-12-21T00:00:00-06:00</published><updated>2018-12-21T00:00:00-06:00</updated><id>https://goenning.net/2018/12/21/ssl-automatico-com-azure-blob-storage</id><content type="html" xml:base="https://goenning.net/2018/12/21/ssl-automatico-com-azure-blob-storage/">&lt;p&gt;Se você não conhece o pacote &lt;code class=&quot;highlighter-rouge&quot;&gt;acme/autocert&lt;/code&gt;, recomendo começar pelo artigo &lt;a href=&quot;https://goenning.net/2017/11/08/certificados-gratuitos-automaticos-com-go/&quot;&gt;Certificados SSL/TLS Gratuitos e Automatizados com Go&lt;/a&gt; para entender como utilizar este pacote para obter certificados SSL/TLS de graça e sem tarefas manuais.&lt;/p&gt;

&lt;p&gt;Por padrão, acme/autocert armazena os certificados em diretório local. Sendo assim, requisições subsequentes irão utilizar o mesmo certificado ao invés de obter um novo.&lt;/p&gt;

&lt;p&gt;O problema é que muitas aplicações estão hospedadas em um cluster, onde a aplicação web está executando em vários servidores ao mesmo tempo. Ter um cache local neste caso não é muito útil, pois cada servidor terá teu próprio cache. É possível usar NFS para resolver isto, mas existem melhores opções hoje em dia.&lt;/p&gt;

&lt;p&gt;Este pacote permite que façamos a troca do mecanismo de cache através de uma implementação de interface, sendo assim, podemos escolher como e onde armazenar nossos certificados.&lt;/p&gt;

&lt;h3 id=&quot;azure-blob-storage&quot;&gt;Azure Blob Storage&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/goenning/azcertcache&quot;&gt;github.com/goenning/azcertcache&lt;/a&gt; é um pacote Go que implementa uma estrátegia de Cache que armazena os certificados em um container do &lt;a href=&quot;https://azure.microsoft.com/en-us/services/storage/blobs/&quot;&gt;Azure Blob Storage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para usar este pacote você precisa de um Account Name e Account Key que podem ser obtidos no Portal do Azure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2018/12/azbs-key.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E isto é tudo o que você precisa colocar no seu código:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;containerName&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;autocertcache&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;azcertcache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;account name&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;account key&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Handle error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autocert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prompt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autocert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AcceptTOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &amp;lt;-- this used to be autocert.DirCache(&quot;&amp;lt;folder name&amp;gt;&quot;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:https&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TLSConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCertificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServeTLS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ta-da! 🎉&lt;/p&gt;

&lt;p&gt;O processo funciona assim:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;O primeiro request ao seu website meusite.com.br é recebido no servidor&lt;/li&gt;
  &lt;li&gt;autocert verifica se meusite.com.br se este certificado está no cache em memória, se estiver, o certificado é retornado ao cliente&lt;/li&gt;
  &lt;li&gt;caso não encontre, autocert então verifica se o certificado de meusite.com.br está no Azure Blob Storage, se estiver, o certificado é retornado ao cliente&lt;/li&gt;
  &lt;li&gt;caso não encontre, autocert obtem um novo certificado através do Let’s Encrypt e armazena tanto no cache em memória quanto no Azure Blob Storage&lt;/li&gt;
  &lt;li&gt;Durante a próxima requisição, mesmo que um servidor diferente esteja encarregado de processá-la, o certificao já estará no Azure Blob Storage, pronto para ser reutilizado&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; o cache em memória é perdido quando o processo é reiniciado, por isto é tão importante armazenar os certificados em algum local que seja resiliente&lt;/p&gt;

&lt;h3 id=&quot;bonus&quot;&gt;BONUS!&lt;/h3&gt;

&lt;p&gt;Se você não utiliza Azure na sua infraestrutura, aqui estão algumas outras opções:&lt;/p&gt;

&lt;p&gt;What if you’re not using Azure Blob Storage? Well then you still have at least three other options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/goenning/sqlcertcache&quot;&gt;https://github.com/goenning/sqlcertcache&lt;/a&gt; para armazenar os certificados em um banco de dados SQL&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/danilobuerger/autocert-s3-cache&quot;&gt;https://github.com/danilobuerger/autocert-s3-cache&lt;/a&gt; para armazenar os certificados em algum serviço compatível com S3: AWS S3, DigitalOcean Spaces, Minio&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_File_System&quot;&gt;NFS&lt;/a&gt; e continue a usar &lt;code class=&quot;highlighter-rouge&quot;&gt;autocert.DirCache&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Um abraço!&lt;/p&gt;</content><author><name>@goenning</name></author><category term="go" /><category term="azure" /><category term="autocert" /><summary type="html">Se você não conhece o pacote acme/autocert, recomendo começar pelo artigo Certificados SSL/TLS Gratuitos e Automatizados com Go para entender como utilizar este pacote para obter certificados SSL/TLS de graça e sem tarefas manuais.</summary></entry><entry xml:lang="en"><title type="html">Using Azure Blob Storage as a cache backend for Go acme/autocert</title><link href="https://goenning.net/2018/12/21/automated-ssl-with-azure-blob-storage/" rel="alternate" type="text/html" title="Using Azure Blob Storage as a cache backend for Go acme/autocert" /><published>2018-12-21T00:00:00-06:00</published><updated>2018-12-21T00:00:00-06:00</updated><id>https://goenning.net/2018/12/21/automated-ssl-with-azure-blob-storage</id><content type="html" xml:base="https://goenning.net/2018/12/21/automated-ssl-with-azure-blob-storage/">&lt;p&gt;If you’re not familiar with &lt;code class=&quot;highlighter-rouge&quot;&gt;acme/autocert&lt;/code&gt; package on Go, I’d recommend you to start with &lt;a href=&quot;https://goenning.net/2017/11/08/free-and-automated-ssl-certificates-with-go/&quot;&gt;Free and Automated SSL Certificates with Go&lt;/a&gt; post. It’ll show you how you can use acme/autocert to provision a Let’s Encrypt Certificate for free in a fully automated manner.&lt;/p&gt;

&lt;p&gt;By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;acme/autocert&lt;/code&gt; stores provisioned certificates on local disk for long-term caching. What happens is that the next time an user visits the same page, this package will fetch the certificate from the local disk instead of provisioning a new one (except if it needs to be renewed, but that’s not relevant here).&lt;/p&gt;

&lt;p&gt;The problem here is that if you have a cluster and your service is deployed across multiple machines, having a local disk cache is not very helpful as each machine would have its own cache. Sure you could use NFS to solve this, but there are more cloud-native ways of doing so.&lt;/p&gt;

&lt;p&gt;Thankfully this package allow us to switch the cache strategy with a custom implementation where you can choose where cache the certificates.&lt;/p&gt;

&lt;h3 id=&quot;azure-blob-storage&quot;&gt;Azure Blob Storage&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/goenning/azcertcache&quot;&gt;github.com/goenning/azcertcache&lt;/a&gt; is a Go package that implements a custom Cache strategy that allows you so store certificates in a &lt;a href=&quot;https://azure.microsoft.com/en-us/services/storage/blobs/&quot;&gt;Azure Blob Storage&lt;/a&gt; container.&lt;/p&gt;

&lt;p&gt;To use this package you’ll need the Account Name and Account Key that can be found here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2018/12/azbs-key.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this is all the setup you need to do:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;containerName&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;autocertcache&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;azcertcache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;account name&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;account key&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Handle error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autocert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prompt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autocert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AcceptTOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &amp;lt;-- this used to be autocert.DirCache(&quot;&amp;lt;folder name&amp;gt;&quot;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:https&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TLSConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCertificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServeTLS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ta-da! 🎉&lt;/p&gt;

&lt;p&gt;The internal workflow is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A request is initialized for mysuperdomain.com&lt;/li&gt;
  &lt;li&gt;autocert checks if mysuperdomain.com certificate is in the in-memory cache and return it to client&lt;/li&gt;
  &lt;li&gt;if it’s not found, autocert checks if mysuperdomain.com certificate is in the long-term cache, which in this case is Azure Blob Storage and return it to client&lt;/li&gt;
  &lt;li&gt;if it’s not found, autocert fetches a new cerificates from let’s encrypt and store in both in-memory and long-term cache.&lt;/li&gt;
  &lt;li&gt;During the next request, even if it hits another server, the certificate will be available on Azure Blob Storage and it’ll be returned to the client&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the in-memory cache is lost when the process restarts, hence why it’s so important to keep these certificates on a long-term cache.&lt;/p&gt;

&lt;h3 id=&quot;bonus&quot;&gt;BONUS!&lt;/h3&gt;

&lt;p&gt;What if you’re not using Azure Blob Storage? Well then you still have at least three other options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/goenning/sqlcertcache&quot;&gt;https://github.com/goenning/sqlcertcache&lt;/a&gt; to store certificates on a SQL Database&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/danilobuerger/autocert-s3-cache&quot;&gt;https://github.com/danilobuerger/autocert-s3-cache&lt;/a&gt; to store certificates on a S3 compatible backend (like AWS S3, DigitalOcean Spaces, Self Hosted Minio…)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_File_System&quot;&gt;NFS&lt;/a&gt; and continue to use &lt;code class=&quot;highlighter-rouge&quot;&gt;autocert.DirCache&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</content><author><name>@goenning</name></author><category term="go" /><category term="azure" /><category term="autocert" /><summary type="html">If you’re not familiar with acme/autocert package on Go, I’d recommend you to start with Free and Automated SSL Certificates with Go post. It’ll show you how you can use acme/autocert to provision a Let’s Encrypt Certificate for free in a fully automated manner.</summary></entry><entry xml:lang="en"><title type="html">How we reduced our initial JS/CSS size by 67%</title><link href="https://goenning.net/2018/11/26/how-we-reduced-initial-jscss-size/" rel="alternate" type="text/html" title="How we reduced our initial JS/CSS size by 67%" /><published>2018-11-26T00:00:00-06:00</published><updated>2018-11-26T00:00:00-06:00</updated><id>https://goenning.net/2018/11/26/how-we-reduced-initial-jscss-size</id><content type="html" xml:base="https://goenning.net/2018/11/26/how-we-reduced-initial-jscss-size/">&lt;p&gt;&lt;img src=&quot;/public/images/2018/11/bundle-size-improvements.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fider is built with React and Webpack on the frontend, so the topics below will be mostly useful for teams using same stack, but the concepts can also be applied to other stacks.&lt;/p&gt;

&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#webpack-bundle-analyzer&quot;&gt;Webpack Bundle Analyzer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#long-term-caching-with-content-hash&quot;&gt;Long term caching with content hash&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-common-bundle&quot;&gt;The common bundle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#code-splitting-on-route-level&quot;&gt;Code Splitting on route level&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#loading-external-dependencies-on-demand&quot;&gt;Loading external dependencies on demand&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#font-awesome-and-tree-shaking&quot;&gt;Font Awesome and Tree Shaking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#switching-from-big-to-small-npm-packages&quot;&gt;Switching from big to small NPM packages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#optimising-the-main-bundle-is-crucial&quot;&gt;Optimising the main bundle is crucial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tslib-typescript-only&quot;&gt;TSLib (TypeScript only)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;webpack-bundle-analyzer&quot;&gt;Webpack Bundle Analyzer&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/webpack-bundle-analyzer&quot;&gt;webpack-bundle-analyzer&lt;/a&gt; is a webpack plugin that generates an interactive zoomable treemap of all your bundles. This has been crucial for us to understand which modules are inside each bundle. You can also see which are the biggest modules within each bundle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you don’t know the root cause, how can you tackle it?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is an example of what this plugin will generate for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2018/11/bundle-size-initial-view.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Did you notice that huge &lt;strong&gt;entities.json&lt;/strong&gt; inside the vendor bundle? That’s a good starting point to analyze the content of your bundle.&lt;/p&gt;

&lt;h2 id=&quot;long-term-caching-with-content-hash&quot;&gt;Long term caching with content hash&lt;/h2&gt;

&lt;p&gt;Long term caching is the process of telling the browser to cache a file for a long time, like 3 months or even 1 year. This is a important settings to ensure that returning users won’t need to download the same JS/CSS files over and over again.&lt;/p&gt;

&lt;p&gt;The browser will cache files based on its full path name, so if you need to force the user to download a new version of your bundle, you need to rename it. Luckly webpack provides a feature to generate the bundles with a dynamic name, hence forcing the browser to download new files only.&lt;/p&gt;

&lt;p&gt;We have previously used &lt;strong&gt;chunkhash&lt;/strong&gt; for a long time on our webpack configuration. 99% of the cases where you want long term cache, the best option is to use &lt;strong&gt;contenthash&lt;/strong&gt;, which will generate a hash based on its content.&lt;/p&gt;

&lt;p&gt;This technique does not reduce the bundle size, but it certainly helps to reduce the amount of times the user has to download our bundles. If the bundle didn’t change, don’t force the user to download it again.&lt;/p&gt;

&lt;p&gt;To learn more, visit the official documentation https://webpack.js.org/guides/caching/&lt;/p&gt;

&lt;h2 id=&quot;the-common-bundle&quot;&gt;The common bundle&lt;/h2&gt;

&lt;p&gt;Combining all the NPM packages into a separate bundle has been a long time practice for many teams. This is very useful when combined with long term caching.&lt;/p&gt;

&lt;p&gt;NPM packages change less often than our app code, so we don’t need to force users to download all your NPM packages if nothing has changed. This is usually called the &lt;strong&gt;vendor bundle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But we can take this practice one step further.&lt;/p&gt;

&lt;p&gt;What about your own code that also change less often? Maybe you have a few basic components like Button, Grid, Toggle, etc. that have been created some time ago and haven’t changed in a while.&lt;/p&gt;

&lt;p&gt;This is a good candidate for a &lt;strong&gt;common bundle&lt;/strong&gt;. You can check this &lt;a href=&quot;https://github.com/getfider/fider/pull/636&quot;&gt;PR #636&lt;/a&gt; where we basically move all our own modules inside some specific folders into a common bundle.&lt;/p&gt;

&lt;p&gt;This will ensure that, unless we change our base components, the user won’t need to redownload it.&lt;/p&gt;

&lt;h2 id=&quot;code-splitting-on-route-level&quot;&gt;Code Splitting on route level&lt;/h2&gt;

&lt;p&gt;Code splitting is currently a hot topic. This has been around for some time, but the tools and frameworks have evolved a lot, to the point where doing code splitting is much simpler now.&lt;/p&gt;

&lt;p&gt;It’s very common to have applications that push one big bundle that contains all the JS/CSS required to render any page within the application, even if the user is only looking at the Home page. We don’t know if the user will ever visit the Site Settings page, but we have pushed all the code for that already. Fider has been doing this for a long time and we now have changed it.&lt;/p&gt;

&lt;p&gt;The idea of Code Splitting is to generate multiple smaller bundles, usually one per route, and a main bundle. The only bundle we send to all the users is the main bundle, which will then asynchronously download all the required bundles to render the current page.&lt;/p&gt;

&lt;p&gt;It seems complicated, but thanks to React and Webpack, this is not rocket science anymore. For those using React &amp;lt;= 16.5, we recommend &lt;a href=&quot;https://github.com/jamiebuilds/react-loadable&quot;&gt;react-loadable&lt;/a&gt;. If you’re already on React 16.6, then you can use React.lazy() which has been a new addition to this version.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In this PR you can find how &lt;a href=&quot;https://github.com/cfilby&quot;&gt;@cfilby&lt;/a&gt; (thank you!) added code splitting to Fider with react-loadable: &lt;a href=&quot;https://github.com/getfider/fider/pull/596&quot;&gt;PR #596&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;After we migrated to React 16.6, we have then replaced this external package with React.lazy: &lt;a href=&quot;https://github.com/getfider/fider/pull/646&quot;&gt;PR #646&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also had issues with some rare events where users were having issues to download asynchronous bundles. A potential solution has been documented on &lt;a href=&quot;https://goenning.net/2018/11/16/how-to-retry-dynamic-import-with-react-lazy/&quot;&gt;How to retry when React lazy fails&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;loading-external-dependencies-on-demand&quot;&gt;Loading external dependencies on demand&lt;/h2&gt;

&lt;p&gt;By using the Webpack Bundle Analyzer we noticed that our vendor bundle had all the content of react-toastify, which is the toaster library that we use. That is usually ok, except that 95% of the Fider users will never see a toaster message. There are very few places we show a toaster, so &lt;strong&gt;why do we push 30kB of JavaScript to every user if they don’t need it&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;This is a similar problem to the one above, except that we are not talking about routes anymore, this is a feature used in multiple routes. Can you code split on a feature level?&lt;/p&gt;

&lt;p&gt;Yes, you can!&lt;/p&gt;

&lt;p&gt;In a nutshell, what you have to do is switch from static import to dynamic import.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// before&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./toastify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// after&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./toastify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Webpack will bundle the toastify module and all its NPM dependencies separately. The &lt;strong&gt;browser will then only download that bundle when the toast is needed&lt;/strong&gt;. If you have configured long term caching, then on the second toaster call it won’t have to download it again.&lt;/p&gt;

&lt;p&gt;The video below shows how it looks like on the browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2018/11/bundle-size-async-toastify.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the details on how this was implemented on &lt;a href=&quot;https://github.com/getfider/fider/pull/645&quot;&gt;PR #645&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;font-awesome-and-tree-shaking&quot;&gt;Font Awesome and Tree Shaking&lt;/h2&gt;

&lt;p&gt;Tree Shaking is the process of importing only what you need from a module and discarding the rest. This is enabled by default when running webpack on production mode.&lt;/p&gt;

&lt;p&gt;The usual approach to use Font Awesome is to import an external font file and a CSS that maps each character (icon) on that font to one CSS class. The result is that even though we only use icon A, B and C, we are forcing the browsers to download this external font and a CSS definition of 600+ icons.&lt;/p&gt;

&lt;p&gt;Thankfully we found &lt;strong&gt;react-icons&lt;/strong&gt;, a NPM package with all free Font Awesome (and other icon packages too!) in a SVG format and exported as React Components on a ES Module format.&lt;/p&gt;

&lt;p&gt;You can then &lt;strong&gt;import only the icons you need&lt;/strong&gt; and webpack will remove all other icons from the bundle. The result? Our CSS has is now &lt;strong&gt;~68kB smaller&lt;/strong&gt;. Not to mention that we don’t need to download external fonts anymore. This change was the biggest contributor on reducing the CSS size on Fider.&lt;/p&gt;

&lt;p&gt;Want see how? Check out this &lt;a href=&quot;https://github.com/getfider/fider/pull/631&quot;&gt;PR #631&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;switching-from-big-to-small-npm-packages&quot;&gt;Switching from big to small NPM packages&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“NPM is like a lego store full of building blocks that you can just pick whichever one you like. You don’t pay for the package you install, but your users pay for the byte size that it adds to your application. Choose wisely.” - @goenning&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While using the Bundle Analyzer we found that markdown-it alone was consuming ~40% of our vendor bundle. We have then decided to go shopping on NPM and look for an alternative markdown parser. The goal was to find a package that was smaller, well maintained and had all the features we needed.&lt;/p&gt;

&lt;p&gt;We’ve been using &lt;a href=&quot;https://bundlephobia.com/&quot;&gt;bundlephobia.com&lt;/a&gt; to analyse the byte size of any NPM package before installing it. We have switched from markdown-it to marked, which &lt;strong&gt;reduced ~63kB from our vendor bundle&lt;/strong&gt; with minimal API change.&lt;/p&gt;

&lt;p&gt;Curious about it? Check out &lt;a href=&quot;https://github.com/getfider/fider/pull/643&quot;&gt;PR #643&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also compare these two packages on bundlephobia:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bundlephobia.com/result?p=marked@0.5.2&quot;&gt;https://bundlephobia.com/result?p=marked@0.5.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bundlephobia.com/result?p=markdown-it@8.4.2&quot;&gt;https://bundlephobia.com/result?p=markdown-it@8.4.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Think twice before adding a large package. Do you really need it? Can your team implement a simpler alternative? If not, can you find another package that does the same job with less bytes? Ultimately, you can still add the NPM package and load it asynchronously like we did with react-toastify mentioned above.&lt;/p&gt;

&lt;h2 id=&quot;optimising-the-main-bundle-is-crucial&quot;&gt;Optimising the main bundle is crucial&lt;/h2&gt;

&lt;p&gt;Imagine that you have an application doing code splitting by route. It’s already running in production and you commit a change to your Dashboard route component. You might think that Webpack will only generate a different file for the bundle that contain the Dashboard route, correct?&lt;/p&gt;

&lt;p&gt;Well, that’s not what actually happens.&lt;/p&gt;

&lt;p&gt;Webpack will &lt;strong&gt;ALWAYS&lt;/strong&gt; regenerate the main bundle if something else changes in your application. The reason being that the main bundle is a pointer to all other bundles. If the hash of another bundle has changed, the main bundle has to change its content so that it now points to the new hash of the Dashboard bundle. Makes sense?&lt;/p&gt;

&lt;p&gt;So if your main bundle contains not only the pointers, but also a lot of common components like Buttons, Toggle, Grids and Tabs, you’re basically forcing the browser to redownload something that has not changed.&lt;/p&gt;

&lt;p&gt;Use the webpack bundle analyzer to understand what’s inside your main bundle. You can then apply some of the techniques we’ve mentioned above to reduce the main bundle size.&lt;/p&gt;

&lt;h2 id=&quot;tslib-typescript-only&quot;&gt;TSLib (TypeScript only)&lt;/h2&gt;

&lt;p&gt;When compiling TypeScript code to ES5, the TypeScript Compiler will also emit some helper functions to the output JavaScript file. This process ensures that the code we wrote in TypeScript is compatible with older browsers that doesn’t support ES6 features like Classes and Generators.&lt;/p&gt;

&lt;p&gt;These helper functions are very small, but when there are many TypeScript files, these helper functions will be present on every file that uses a non-ES5 code. Webpack won’t be able to tree shake it and the final bundle will contain multiple occurrences of the very same code. The result? A slightly bigger bundle.&lt;/p&gt;

&lt;p&gt;Thankfully there’s a solution for this. There is a NPM package called &lt;strong&gt;tslib&lt;/strong&gt; that contains all the helper functions needed by TypeScript. We can then tell the compiler to import the helper functions from the tslib package instead of emitting it to the output JavaScript file. This is done by setting &lt;strong&gt;importHelpers: true&lt;/strong&gt; on the &lt;strong&gt;tsconfig.json&lt;/strong&gt; file. Don’t forget to install tslib with &lt;strong&gt;npm install tslib —save&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That’s all!&lt;/p&gt;

&lt;p&gt;The amount of bytes this can reduce from the bundle will depend on the amount of non-ES5 files, which can be a lot on a React app if most of the Components are classes.&lt;/p&gt;

&lt;h2 id=&quot;the-next-billions-users&quot;&gt;The next billions users&lt;/h2&gt;

&lt;p&gt;Are you ready for &lt;a href=&quot;https://developers.google.com/web/billions/&quot;&gt;the next billion users&lt;/a&gt;? Think about all the potential users of your app that currently struggle to use it because on a low-cost device and slower network.&lt;/p&gt;

&lt;p&gt;Reducing the byte size of our bundles has a direct impact on the performance of our applications and can help us make it more accessible to everyone. Hopefully this post can you help on this journey.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;</content><author><name>@goenning</name></author><category term="react" /><category term="performance" /><category term="web" /><summary type="html"></summary></entry><entry xml:lang="pt"><title type="html">Como reduzimos o tamanho inicial do JS e CSS em 67%</title><link href="https://goenning.net/2018/11/26/como-reduzimos-tamanho-inicial-js-css/" rel="alternate" type="text/html" title="Como reduzimos o tamanho inicial do JS e CSS em 67%" /><published>2018-11-26T00:00:00-06:00</published><updated>2018-11-26T00:00:00-06:00</updated><id>https://goenning.net/2018/11/26/como-reduzimos-tamanho-inicial-js-css</id><content type="html" xml:base="https://goenning.net/2018/11/26/como-reduzimos-tamanho-inicial-js-css/">&lt;p&gt;&lt;img src=&quot;/public/images/2018/11/bundle-size-improvements.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fider foi construído com React e Webpack no frontend, por isto o tópicos abaixo são mais úteis para quem utiliza as mesmas tecnologias, mas muitos conceitos podem ser aplicados em Angular e Vue.js, por exemplo.&lt;/p&gt;

&lt;h3 id=&quot;índice&quot;&gt;Índice&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#webpack-bundle-analyzer&quot;&gt;Webpack Bundle Analyzer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cache-de-longa-duração-com-hash-de-conteúdo&quot;&gt;Cache de longa duração com hash de conteúdo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#o-bundle-comum&quot;&gt;O bundle comum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#divisão-de-código-baseada-em-rotas&quot;&gt;Divisão de código baseada em rotas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#carregando-dependências-externas-por-demanda&quot;&gt;Carregando dependências externas por demanda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#font-awesome-e-tree-shaking&quot;&gt;Font Awesome e Tree Shaking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trocando-grandes-pacotes-npm-por-opções-menores&quot;&gt;Trocando grandes pacotes NPM por opções menores&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#otimizando-o-bundle-principal-é-crucial&quot;&gt;Otimizando o bundle principal é crucial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tslib-apenas-para-usuários-de-typescript&quot;&gt;TSLib (apenas para usuários de TypeScript)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;webpack-bundle-analyzer&quot;&gt;Webpack Bundle Analyzer&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/webpack-bundle-analyzer&quot;&gt;webpack-bundle-analyzer&lt;/a&gt; é um plugin para o webpack que gera um mapa interativo de todos os bundles da aplicação. Isto foi crucial para nós entendermos quais são os módulos que estão dentro de cada bundle. Este mapa inclui não só o nome, mas também o tamanho de cada módulo.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Se você não sabe qual a raiz do problema, como você o resolve?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Este é um exemplo do que do mapa que o plugin gerou para nós.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2018/11/bundle-size-initial-view.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Você notou aquele enorme &lt;strong&gt;entities.json&lt;/strong&gt; dentro do vendor bundle? Aquele é um bom candidato a ser analizado para saber o que pode ser feito para minimizar o tamanho dos bundles.&lt;/p&gt;

&lt;h2 id=&quot;cache-de-longa-duração-com-hash-de-conteúdo&quot;&gt;Cache de longa duração com hash de conteúdo&lt;/h2&gt;

&lt;p&gt;Cache de longa duração é o processo de instruir o navegador a fazer o cache de um arquivo por um longo tempo, por exemplo, 3 meses ou até mesmo 1 ano. Isto é muito importante para garantir que visitantes recorrentes não precisam fazer o download dos mesmos arquivos JavaScript/CSS novamente.&lt;/p&gt;

&lt;p&gt;O navegador fará o cache dos arquivos baseados no seu nome completo, então se você precisa forçar o download de uma nova versão de seu bundle, é só garantir que o nome seja diferente. O webpack possui uma funcionalidade que gera o nome dos arquivos com base em algum critério.&lt;/p&gt;

&lt;p&gt;Anteriormente estávamos usando a configuração &lt;strong&gt;chunkhash&lt;/strong&gt; do webpack para fazer o cache de longa duração, mas em 99% dos casos, a melhor opção é usar &lt;strong&gt;contenthash&lt;/strong&gt;. Esta configuração faz com que o webpack gere o nome do arquivo vaseado no seu conteúdo.&lt;/p&gt;

&lt;p&gt;Esta configuração não reduz o tamanho total do bundle, mas certamente ajuda na hora de reduzir a quantidade de vezes que o usuários precisa fazer o download. Se o bundle não for alterado, não há necessidade de forçar nenhum download.&lt;/p&gt;

&lt;p&gt;Caso queira saber mais sobre isto, visite https://webpack.js.org/guides/caching/&lt;/p&gt;

&lt;h2 id=&quot;o-bundle-comum&quot;&gt;O bundle comum&lt;/h2&gt;

&lt;p&gt;Combinar todos os pacotes NPM em um bundle separatado é algo bem comum em vários projetos. Isto é muito útil quando combinado com o cache de longa duração.&lt;/p&gt;

&lt;p&gt;Pacotes NPM são alterados com menos frequência do que nosso código, então assim não forçamos os visitantes a fazer o download do bundle enquanto os pacotes do NPM não forem atualizados. Este bundle é normalmente chamado de &lt;strong&gt;vendor bundle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mas é possível levar este conceito um passo à diante.&lt;/p&gt;

&lt;p&gt;Já pensou que no seu próprio código existem algumas partes que raramente são alteradas? Talvez você tenha alguns componentes básicos como Botão, Tabela, Alertas, etc. que foram criados à muito tempo atrás e que já faz tempo que não são alterados.&lt;/p&gt;

&lt;p&gt;Estes módulos são excelentes candidados para fazerem parte do &lt;strong&gt;common bundle&lt;/strong&gt;. Veja esta &lt;a href=&quot;https://github.com/getfider/fider/pull/636&quot;&gt;PR #636&lt;/a&gt; onde nós basicamente movemos todos os nossos próprios módulos de dentro de um diretório específico para um bundle comum.&lt;/p&gt;

&lt;p&gt;Isto garante que, a não ser que nossos componentes básicos forem alterados, os visitantes do Fider não terão que fazer download deles novamente.&lt;/p&gt;

&lt;h2 id=&quot;divisão-de-código-baseada-em-rotas&quot;&gt;Divisão de código baseada em rotas&lt;/h2&gt;

&lt;p&gt;Divisão de código (code splitting) é um tópico que está na moda. Esta técnica já existe há algum tempo, mas com a evolução das ferramentas e frameworks, fazer divisão de código ficou mais simples agora.&lt;/p&gt;

&lt;p&gt;É muito comum ver aplicações web que colocam todo o conteúdo JS/CSS em um único arquivo. Este arquivo possui o código necessário para renderizar qualquer página da aplicação, mesmo que os visitantes esteja olhando apenas a página inicial. Não sabemos se os visitantes vão visiar a página de configuração, mas mesmo assim fazemos com eles empurramos todo o JavaScript para eles. O Fider sempre foi assim, porém alteramos isto recentemente.&lt;/p&gt;

&lt;p&gt;A idea da divisão de código é gerar vários pequenos bundles, normalmente um por rota/página e outro bundle principal. O único bundle que é enviado para todos os usuários é o principal, que tem como objetivo carregar os outros bundles menos baseados para poderar renderizar as páginas necessárias.&lt;/p&gt;

&lt;p&gt;Parece complicado, mas graças ao React e Webpack, o processo ficou mais simples. Para quem usa React &amp;lt;= 16.5, recomendamos o &lt;a href=&quot;https://github.com/jamiebuilds/react-loadable&quot;&gt;react-loadable&lt;/a&gt;. Mas se você já está no React 16.6 ou mais recente, então é possível usar &lt;code class=&quot;highlighter-rouge&quot;&gt;React.lazy()&lt;/code&gt; que foi recentemente adicionado.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nesta PR você consegue ver como &lt;a href=&quot;https://github.com/cfilby&quot;&gt;@cfilby&lt;/a&gt; (obrigado!) adicionou divisão de código no Fider com react-loadable: &lt;a href=&quot;https://github.com/getfider/fider/pull/596&quot;&gt;PR #596&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Depois de migrar para React 16.6, trocamos a dependência externa por React.lazy &lt;a href=&quot;https://github.com/getfider/fider/pull/646&quot;&gt;PR #646&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Também tivemos alguns raros problemas onde os visitantes estavam tendo dificuldades de baixar os bundles de forma assíncrona. A solução que implementamos foi documentada aqui &lt;a href=&quot;https://goenning.net/2018/11/16/como-repetir-quando-react-lazy-falha/&quot;&gt;Como repetir quando React Lazy falha&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;carregando-dependências-externas-por-demanda&quot;&gt;Carregando dependências externas por demanda&lt;/h2&gt;

&lt;p&gt;Usando Webpack Bundle Analyzer, descobrimos que nosso vendor bundle continha todo o conteúdo do react-toastify, a biblioteca de mensagens/popups que usamos. Isto geralmente é esperado, mas no Fider, 95% nunca irão ver uma mensagem desta, afinal, existe pouquíssimos lugares em que mostramos estas mensagens. &lt;strong&gt;Por que enviamos 30kB de JavaScript para todos os visitantes se eles não vão usar?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Este problema é similar ao de cima, exceto que não estamos mais falando de rotas/páginas, e sim de uma funcionalidade que é usada em diversas páginas. É possível fazer  divisão de código no nível de funcionalidade?&lt;/p&gt;

&lt;p&gt;Sim, é possível! Também não é tão complicado 😀&lt;/p&gt;

&lt;p&gt;Basta trocar a importação do módulo de estático para dinâmico. Ficaria assim:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// antes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./toastify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Olá Mundo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// depois&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./toastify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Olá Mundo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O Webpack fará o bundle do &lt;code class=&quot;highlighter-rouge&quot;&gt;toastify&lt;/code&gt; e todas as suas dependências do NPM de forma separada. &lt;strong&gt;O navegador só baixará este bundle quando o código for executado&lt;/strong&gt;. E case você tenha configurado o cache de longa duração, na segunda vez que este código for executado não será necessário baixar o bundle novamente.&lt;/p&gt;

&lt;p&gt;Este vídeo mostra o comportamento disto no navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2018/11/bundle-size-async-toastify.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Você pode encontrar mais detalhes de como isto foi implementado nesta &lt;a href=&quot;https://github.com/getfider/fider/pull/645&quot;&gt;PR #645&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;font-awesome-e-tree-shaking&quot;&gt;Font Awesome e Tree Shaking&lt;/h2&gt;

&lt;p&gt;Tree Shaking é o processo de importar somente o código que vamos usar e descartar o resto. Isto é habilitado por padrão quando usamos Webpack no modo de produção.&lt;/p&gt;

&lt;p&gt;A forma tradicionar de usar Font Awesome é importar um arquivo CSS externo (que por sua vez referência outras Fontes). Este CSS faz uma mapa de cada ícone para uma classe CSS. O resultado e que apesar de nossas aplicações usarem apenas os ícones A, B e C, estamos forçando os navegadores a baixarem mais de 600 ícones sem necessidade.&lt;/p&gt;

&lt;p&gt;Depois de algum tempo procurando, achamos o &lt;strong&gt;react-icons&lt;/strong&gt;, um pacote NPM que possuí todas os ícones do Font Awesome e de outras fontes também. Os ícones estã no format de SVG e são exportados como componentes React no format ES6 Module.&lt;/p&gt;

&lt;p&gt;Isto significa que é possível importar apenas os ícones que precisamos, assim o webpack consegue remover todos os outros ícones que não são necessários. O resultado? &lt;strong&gt;Nosso CSS ficou 68kB menor&lt;/strong&gt;. Sem contar que agora não é necessário fazer download de fontes externas também. Esta alteração foi o maior contribuinte para a redução do CSS no Fider.&lt;/p&gt;

&lt;p&gt;Quer saber como fizemos? Veja esta &lt;a href=&quot;https://github.com/getfider/fider/pull/631&quot;&gt;PR #631&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;trocando-grandes-pacotes-npm-por-opções-menores&quot;&gt;Trocando grandes pacotes NPM por opções menores&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“NPM é como uma grande loja de lego, cheia de peças de montar disponíveis para você escolher. Você não paga pelo pacote que é instalado, mas seus usuários pagam pelos bytes que isto adicionado à sua aplicação. Escolha cuidadosamente.” - @goenning&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Novamente usando o Webpack Bundle Analyzer, descobrimos que o pacote &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-it&lt;/code&gt; sozinho representava 40% do nosso vendor bundle. Decidimos então procurar no NPM por outra alternativa. O objetivo era achar um pacote que fosse menor, com desenvolvimento ativo e tivesse todas as funcionalidades que precisávamos.&lt;/p&gt;

&lt;p&gt;Usamos bastante o &lt;a href=&quot;https://bundlephobia.com/&quot;&gt;bundlephobia.com&lt;/a&gt; para analisar o tamanho total dos pacotes NPM. Encontramos então o &lt;code class=&quot;highlighter-rouge&quot;&gt;marked&lt;/code&gt;, que &lt;strong&gt;reduziu nosso vendor bundle em 63kb&lt;/strong&gt; com uma alteração mínima no nosso código.&lt;/p&gt;

&lt;p&gt;Está curioso? Veja esta &lt;a href=&quot;https://github.com/getfider/fider/pull/643&quot;&gt;PR #643&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Você também pode comparar este dois pacotes no bundlephobia&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bundlephobia.com/result?p=marked@0.5.2&quot;&gt;https://bundlephobia.com/result?p=marked@0.5.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bundlephobia.com/result?p=markdown-it@8.4.2&quot;&gt;https://bundlephobia.com/result?p=markdown-it@8.4.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pense duas vezes antes de adicionar um pacote. Você realmente precisa dele? Será que não é possível implementar uma alternativa mais simples? Será que tem algum outro pacote que faz o mesmo trabalho com menos bytes? Caso contrário, você também pode optar por adicionar este pacote e carregá-lo sob demanda como fizemos com o react-toastify mencionado acima.&lt;/p&gt;

&lt;h2 id=&quot;otimizando-o-bundle-principal-é-crucial&quot;&gt;Otimizando o bundle principal é crucial&lt;/h2&gt;

&lt;p&gt;Imagine que sua aplicação faz a divisão de codigo por rotas. A aplicação já está em produção e você faz uma alteraçao no componente &lt;code class=&quot;highlighter-rouge&quot;&gt;Dashboard&lt;/code&gt;. Você acha que o Webpack gerará um novo bundle somente para o &lt;code class=&quot;highlighter-rouge&quot;&gt;Dashboard&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Não é exatamente isto o que acontece.&lt;/p&gt;

&lt;p&gt;O Webpack &lt;strong&gt;sempre&lt;/strong&gt; vai regerar o bundle principal se qualquer outra parte da sua aplicação for alteradas. O motivo disto e que o bundle principal serve como um ponteiro para todos os outros bundles menores. Se o nome de um destes arquivos é alterado, o bundle principal tambem deve ser alterado com a nova referência dos outros bundles. Faz sentido, não é?&lt;/p&gt;

&lt;p&gt;Então se seu bundle principal possui não apenas os ponteiros, mas também muito código como componentes básicos e outras funções, você está forçando o navegador a baixar tudo isto novamente.&lt;/p&gt;

&lt;p&gt;Use o webpack bundle analyzer para entender o que faz parte do seu bundle principal e então aplique as técnicas apresentadas acima para remover (ou mover) o máximo possível de código.&lt;/p&gt;

&lt;h2 id=&quot;tslib-apenas-para-usuários-de-typescript&quot;&gt;TSLib (apenas para usuários de TypeScript)&lt;/h2&gt;

&lt;p&gt;Quando compilamos código TypeScript para ES5, o compilador do TypeSript emite algunas funções de ajuda (helper functions) em cada arquivo JavaScript. Este processo garante que o código escrito em TypeScript funcionará em navegadores mais antigos que não suportam funcionalidades do ES6, como por exemplo, Classes e Generators.&lt;/p&gt;

&lt;p&gt;Estas funções de ajuda são bem pequenas, mas a quantidade delas se multiplica baseado na quantidade de arquivos TypeScript de seu projeto. O Webpack não consegue fazer o tree shaking disto e o resultado é um bundle com dezenas (ou centenas) de funções dupicadas. Seu bundle acabe de ficar maior do que o necessário.&lt;/p&gt;

&lt;p&gt;O próprio TypeScript possui uma solução para isto. Existe um pacote NPM chamado de &lt;strong&gt;tslib&lt;/strong&gt; que contém todas estas funções de ajuda que o TypeScript precisa. Podemos instruir o compilador a usar as funções deste pacotes ao invés de emitir este código nos arquivos JavaScript.&lt;/p&gt;

&lt;p&gt;Para configurar isto, basta instalar o pacote com &lt;strong&gt;npm install tslib —save&lt;/strong&gt; e alterar o &lt;strong&gt;tsconfig.json&lt;/strong&gt; e incluir a configuração &lt;strong&gt;importHelpers: true&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Isto é tudo!&lt;/p&gt;

&lt;p&gt;A quantidade de bytes que isto reduzirá dependente da quantidade de arquivos TypeScript que usam código ES6, o que pode ser bastante em um projeto React.&lt;/p&gt;

&lt;h2 id=&quot;o-próximo-bilhão-de-usuários&quot;&gt;O próximo bilhão de usuários&lt;/h2&gt;

&lt;p&gt;você está pronto para o &lt;a href=&quot;https://developers.google.com/web/billions/&quot;&gt;próximo bilhão de usuários&lt;/a&gt;? Imagine todos os potenciais usuários de sua aplicação que hoje possuem dificuldade de usá-la em um dispositivo inferior ou com uma conexão de internet precária.&lt;/p&gt;

&lt;p&gt;Reduzir o tamanho dos bundles possui um impacto direto no desempenho das aplicação e isto as torna mais acessíveis para todo mundo. Espero que este post te ajude nesta jornada.&lt;/p&gt;

&lt;p&gt;Um abraço.&lt;/p&gt;</content><author><name>@goenning</name></author><category term="react" /><category term="performance" /><category term="web" /><summary type="html"></summary></entry><entry xml:lang="en"><title type="html">How to retry when React lazy fails</title><link href="https://goenning.net/2018/11/16/how-to-retry-dynamic-import-with-react-lazy/" rel="alternate" type="text/html" title="How to retry when React lazy fails" /><published>2018-11-16T00:00:00-06:00</published><updated>2018-11-16T00:00:00-06:00</updated><id>https://goenning.net/2018/11/16/how-to-retry-dynamic-import-with-react-lazy</id><content type="html" xml:base="https://goenning.net/2018/11/16/how-to-retry-dynamic-import-with-react-lazy/">&lt;p&gt;React 16.6 has been released and it’s now easier than ever to do code split within our React applications by using the lazy function.&lt;/p&gt;

&lt;p&gt;If you don’t know what I’m talking about, you should definitely read this &lt;a href=&quot;https://reactjs.org/blog/2018/10/23/react-v-16-6.html&quot;&gt;https://reactjs.org/blog/2018/10/23/react-v-16-6.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a few days monitoring a production application that is using lazy, I noticed some client-side errors like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Loading chunk 6 failed. (error: https://.../6.4e464a072cc0e5e27a07.js)
Loading CSS chunk 6 failed. (https://.../6.38a8cd5e9daba617fb66.css)	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Why?!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I don’t actually know why, but I can only assume this is related to the user network. Maybe they are on a slow 3G and there was a network hiccup? That’s not a rare event, right?&lt;/p&gt;

&lt;p&gt;Alright, if that’s true, how do we solve that?&lt;/p&gt;

&lt;p&gt;We can do the same thing that everyone does when a network request fails: retry it! 😄&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Did you know that the &lt;strong&gt;import(…)&lt;/strong&gt; function that we use on lazy is just a function that returns a Promise? Which basically means that you can chain it just like any other Promise.&lt;/p&gt;

&lt;p&gt;Below you can find a basic implementation of a retry function.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retriesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;retriesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// reject('maximum retries exceeded');&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;// Passing on &quot;reject&quot; is the important part&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retriesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Source: &lt;a href=&quot;https://gist.github.com/briancavalier/842626&quot;&gt;https://gist.github.com/briancavalier/842626&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we just need to apply it to our lazy import.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Code split without retry login&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./path/to/productlist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Code split with retry login&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./path/to/productlist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the browser fails to download the module, it’ll try again 5 times with a 1 second delay between each attempt. If even after 5 tries it import it, then an error is thrown.&lt;/p&gt;

&lt;p&gt;That’s all! 🎉&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</content><author><name>@goenning</name></author><category term="react" /><summary type="html">React 16.6 has been released and it’s now easier than ever to do code split within our React applications by using the lazy function.</summary></entry><entry xml:lang="pt"><title type="html">Como repetir quando React lazy falha</title><link href="https://goenning.net/2018/11/16/como-repetir-quando-react-lazy-falha/" rel="alternate" type="text/html" title="Como repetir quando React lazy falha" /><published>2018-11-16T00:00:00-06:00</published><updated>2018-11-16T00:00:00-06:00</updated><id>https://goenning.net/2018/11/16/como-repetir-quando-react-lazy-falha</id><content type="html" xml:base="https://goenning.net/2018/11/16/como-repetir-quando-react-lazy-falha/">&lt;p&gt;React 16.6 foi lançado e agora é mais fácil do que nunca fazer importacão dinâmica de componentes usando a nova funcão chamda lazy.&lt;/p&gt;

&lt;p&gt;Se você não sabe do que estou falando, recomendo começar por este post &lt;a href=&quot;https://pt-br.reactjs.org/blog/2018/10/23/react-v-16-6.html&quot;&gt;https://pt-br.reactjs.org/blog/2018/10/23/react-v-16-6.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Após alguns dias monitorando uma aplicação em produção que estava usando lazy, notamos errors no Browser como este aqui:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Loading chunk 6 failed. (error: https://.../6.4e464a072cc0e5e27a07.js)
Loading CSS chunk 6 failed. (https://.../6.38a8cd5e9daba617fb66.css)	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Por quê??!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para ser sincero, eu também sei não o motivo. No momento estou assumindo que possa ser algum problema de rede instável ou talvez uma conexão 3G muito lenta do lado do cliente, afinal isto ainda é algo bem comum!&lt;/p&gt;

&lt;p&gt;Se este for o caso, como resolve este problema?&lt;/p&gt;

&lt;p&gt;Podemos fazer aquilo que quase todo programador faz quando uma requisição HTTP falha: tente outra vez! 😄&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Como?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Você sabia que a função &lt;strong&gt;import(…)&lt;/strong&gt; que é usada no lazy retorna uma &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;? Isto basicamente significa que é possível encadear Promises como qualquer outra.&lt;/p&gt;

&lt;p&gt;Abaixo há uma implementação de uma função retry usando promises.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retriesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;retriesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// reject('maximum retries exceeded');&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;// Passing on &quot;reject&quot; is the important part&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retriesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Source: &lt;a href=&quot;https://gist.github.com/briancavalier/842626&quot;&gt;https://gist.github.com/briancavalier/842626&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agora só precisamos usá-la em conjunto com a função lazy.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Lazy sem retry&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./path/to/productlist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Lazy com retry&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./path/to/productlist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Se o browser, por qualquer motivo que seja, não conseguir fazer o download deste módulo, 5 tentativas serão feitas a cada 1 segundo. Se todas as 5 tentativas falharem, então o erro mencionado no começo deste post é lançado.&lt;/p&gt;

&lt;p&gt;Isto é tudo! 🎉&lt;/p&gt;

&lt;p&gt;Abraços e até a próxima!&lt;/p&gt;</content><author><name>@goenning</name></author><category term="react" /><summary type="html">React 16.6 foi lançado e agora é mais fácil do que nunca fazer importacão dinâmica de componentes usando a nova funcão chamda lazy.</summary></entry><entry xml:lang="en"><title type="html">Free and Automated SSL/TLS Certificates with Go</title><link href="https://goenning.net/2017/11/08/free-and-automated-ssl-certificates-with-go/" rel="alternate" type="text/html" title="Free and Automated SSL/TLS Certificates with Go" /><published>2017-11-08T00:00:00-06:00</published><updated>2017-11-08T00:00:00-06:00</updated><id>https://goenning.net/2017/11/08/free-and-automated-ssl-certificates-with-go</id><content type="html" xml:base="https://goenning.net/2017/11/08/free-and-automated-ssl-certificates-with-go/">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Jan 13, 2018&lt;/strong&gt;: This post has been updated to use HTTP challenge as Let’s Encrypt disabled the TLS-SNI challenge, which we were using before.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;HTTPS has become a must nowadays. Not only for its security purpose, but also because search engines like Google are giving better rank to websites that run on a secure protocol over those using plain HTTP.&lt;/p&gt;

&lt;p&gt;It’s 2017 and gone are the days that we could use the price as an excuse to not have HTTPS our our websites.&lt;/p&gt;

&lt;p&gt;On this post I’ll explain how to create a Go web application that automatically generates SSL/TLS Certificates and use them to run itself on HTTPS. The best part is: &lt;strong&gt;It’s free!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;If you wish to follow this demo and try it yourself, please make sure you comply with following requirements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need the Go compiler;&lt;/li&gt;
  &lt;li&gt;A server that is publicly available. &lt;em&gt;If you don’t have one, I suggest using a VM on &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;Digital Ocean&lt;/a&gt;. If you run it for 24 hours, you’ll pay only $0.15;&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;A domain name and access to it’s DNS settings. You’ll not need this if your cloud provides a public shared name, for example: &lt;code class=&quot;highlighter-rouge&quot;&gt;yourvm0001.yourcloud.net&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lets-encrypt-and-the-acme-protocol&quot;&gt;Let’s Encrypt and the ACME protocol&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; is a very well known and trusted SSL/TLS certificate issuer that provides a free and automated generation process. It is possible to issue a certificate in less than a second without any registration process or payment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autocert&lt;/strong&gt; is a Go package that implements a client of the ACME protocol used to generates certificates on Let’s Encrypt. This is the only package dependency that you will need, no other installation or package is required.&lt;/p&gt;

&lt;p&gt;You can get it as any other Go package.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get golang.org/x/crypto/acme/autocert
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Those looking for more information on ACME or alternative packages, I recommend this talk &lt;a href=&quot;https://www.youtube.com/watch?v=KdX51QJWQTA&quot;&gt;dotGo 2016 - Matthew Holt - Go with ACME&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-magic-code-explained-step-by-step&quot;&gt;The &lt;del&gt;magic&lt;/del&gt; code explained step by step&lt;/h2&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;crypto/tls&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;golang.org/x/crypto/acme/autocert&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewServeMux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Secure World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;certManager&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autocert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prompt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autocert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AcceptTOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autocert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DirCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;certs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:443&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TLSConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCertificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;certManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:80&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;certManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTPHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServeTLS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We start the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function by creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;mux&lt;/code&gt; with a simple Hello World message on path &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;. In this example we’re using the Go’s default Mux, but it could be easily replaced by any other third-party router.&lt;/p&gt;

&lt;p&gt;The next step we create an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;autocert.Manager&lt;/code&gt;. This struct is responsible for communicating with Let’s Encrypt and fetch the SSL/TLS certificates. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache&lt;/code&gt; field is an interface that defines how and where &lt;code class=&quot;highlighter-rouge&quot;&gt;autocert.Manager&lt;/code&gt; should store and load the certificates from. In this example we’re using &lt;code class=&quot;highlighter-rouge&quot;&gt;autocert.DirCache&lt;/code&gt; that stores the certificates in a local folder. This is the easiest way to get started, but might not be the best one for websites hosted on multiple servers, because each server will have it’s own cache.&lt;/p&gt;

&lt;p&gt;The last step is to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;http.Server&lt;/code&gt; that listen on port &lt;code class=&quot;highlighter-rouge&quot;&gt;443&lt;/code&gt; and uses our &lt;code class=&quot;highlighter-rouge&quot;&gt;mux&lt;/code&gt; instance. We then create &lt;code class=&quot;highlighter-rouge&quot;&gt;tls.Config&lt;/code&gt; object and assign it to the server. Now is where &lt;strong&gt;the “magic” happens&lt;/strong&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;GetCertificate&lt;/code&gt; is a method that we can use to tell the server where to load the certificate whenever a new HTTPS request is starting. This method gives us the opportunity to choose what certificate to use instead of returning a specific one for every request like most applications does. We then use &lt;code class=&quot;highlighter-rouge&quot;&gt;certManager.GetCertificate&lt;/code&gt; which will first try to get a matching certificate from the cache, if there’s none matching, then a new certificate is fetched from Let’s Encrypt using the ACME protocol.&lt;/p&gt;

&lt;p&gt;Early 2018, &lt;a href=&quot;https://community.letsencrypt.org/t/2018-01-11-update-regarding-acme-tls-sni-and-shared-hosting-infrastructure/50188&quot;&gt;Let’s Encrypt disabled TLS-SNI challenge&lt;/a&gt; due to security reasons. The recommendation is to use &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-acme-acme-07#section-8.3&quot;&gt;HTTP challenge&lt;/a&gt;, and we do so by using &lt;code class=&quot;highlighter-rouge&quot;&gt;certManager.HTTPHandler(nil)&lt;/code&gt; and attaching it a new http listener on port 80.&lt;/p&gt;

&lt;p&gt;After that, all we need to do is start the server with &lt;code class=&quot;highlighter-rouge&quot;&gt;server.ListenAndServeTLS(&quot;&quot;, &quot;&quot;)&lt;/code&gt;. If you’ve worked with a HTTPS server on Go before, you probably remember that these two parameters are the &lt;code class=&quot;highlighter-rouge&quot;&gt;Certificate&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Privatey Key&lt;/code&gt;. When using &lt;code class=&quot;highlighter-rouge&quot;&gt;autocert&lt;/code&gt;, we don’t need these so we pass an empty string.&lt;/p&gt;

&lt;p&gt;It worths to mention that, when using &lt;code class=&quot;highlighter-rouge&quot;&gt;certManager.HTTPHandler(nil)&lt;/code&gt;, all traffic comming into HTTP will be redirect to HTTPS automatically. You can override this behaviour by passing a http.Handler instead of nil as first parameter.&lt;/p&gt;

&lt;h2 id=&quot;lets-run-it&quot;&gt;Let’s run it!&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You can run it like any other Go web app, but it’ll fail if you do it on your local machine. The reason being that Let’s Encrypt requires the website to be publicly available through a know DNS name. When you run it locally, Let’s Encrypt cannot ping back your domain for verification purposes and it fails.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new DNS A record targeting your VM public IP.&lt;/li&gt;
  &lt;li&gt;Compile your Go app with &lt;code class=&quot;highlighter-rouge&quot;&gt;CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o autossl&lt;/code&gt; or different parameters if your target platform is not linux/amd64.&lt;/li&gt;
  &lt;li&gt;Copy your binary to the server.&lt;/li&gt;
  &lt;li&gt;Log into your server with SSH and start your Go server by simply running the binary you have just copied.&lt;/li&gt;
  &lt;li&gt;Open your browser with the address of your DNS domain.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/2017/11/auto-ssl-golang.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ta-Da! 🎉&lt;/p&gt;

&lt;p&gt;You should now see the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello Secure World&lt;/code&gt; message and the green HTTPS lock icon.&lt;/p&gt;

&lt;p&gt;You might notice that it might take a few seconds to load the first request. That’s because the SSL/TLS certificate generation process is happening on the background. Consecutive request should be lightning fast as the certificate is already cached.&lt;/p&gt;

&lt;h2 id=&quot;important-notes-and-suggestions&quot;&gt;Important notes and suggestions:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;There are limits on how many certificates can be generated for the same domain. At the time of this writing, the limit is 20 certificates per week. It might look a lot, but if you don’t manage the cache properly you might easily reach this limit. For more information about Let’s Encrypt limits, check the official docs &lt;a href=&quot;https://letsencrypt.org/docs/rate-limits/&quot;&gt;https://letsencrypt.org/docs/rate-limits/&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;It’s up to you to decided where and how you’re going to store the certificate. The temporary local storage works great when you have only a few servers. Once your cluster grows, this method might not suit you as each server will fetch a new certificate. Remember the limit explained above.&lt;/li&gt;
  &lt;li&gt;All certificates generated by Let’s Encrypt are valid for only 90 days. Thankfully &lt;strong&gt;autocert&lt;/strong&gt; handles renewal automatically so we don’t need to do nothing. But it’s always a good idea to keep an eye on it when it’s close to expire date.&lt;/li&gt;
  &lt;li&gt;Try to use it on a multi-tenant application where each tenant has its own subdomain and you’ll fail. I learned the hard way. The limit is by domain name, excluding sub domain, so you can only generate certificates for 20 tenants a week.&lt;/li&gt;
  &lt;li&gt;As you cannot use autocert locally, you’ll need to build your app in such a way that you can choose between running on HTTP or HTTPS, so that you can easily use HTTP during development.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have any question, feedback or suggestion, please feel free to drop me a comment. I’m happy to help if I can.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</content><author><name>@goenning</name></author><category term="go" /><category term="security" /><summary type="html">Jan 13, 2018: This post has been updated to use HTTP challenge as Let’s Encrypt disabled the TLS-SNI challenge, which we were using before.</summary></entry></feed>